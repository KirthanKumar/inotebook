#46 - Adding Data Validation Using express-validator:

npm install express-validator

[
    body("name").isLength({ min: 3 }),
    body("email").isEmail(),
    body("password").isLength({ min: 5 }),
]
this is Validation array passed as second argument to router.post() method 

(req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
}
this checks if error occured or not. Error occured means not following our validation. If error occured it responds with array of errors.

[
    body("name", "Enter a valid name").isLength({ min: 3 }),
    body("email", "Enter a valid email").isEmail(),
    body("password", "Password must be atleast 5 characters long").isLength({ min: 5 }),
]
we can also specify our custom error messages like done above

check if getting error by not following validation using tunder-client.
see 'checking validation' request in tunder-client

-----------------------------------

User.create({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password,
}).then((user) => res.json(user));
this will create User and save date to the database

and if we try to send POST request with same set of data again it throws error. that means our validation was successful

see 'validation + saving data to perticular database' request in tunder-client

--------------------------------------------------------------------

#47 - Creating ThunderClient Collections to Manage Requests + Some changes:
we can also export the collections in ThunderClient and import in some other PC.

--------------------------------------------------------------------

#48 - Understanding password Hashing, Salt & Pepper: 
hash is a one way function. suppose say a client requests backend for login. Client enters password, backend hashes the password and compares it with the hashed password corresponding to the account to which client is trying to login. If they match then login is successful. 

If a client is using a common password and a hacker owns a rainbow table(contains hash value of some common passwords). And if hacker hacks into the database he/she can find the corresponding password for hash value in database and hack into account. To overcome this limitation we use salt.

backend adds salt to password and hashes it and stores it in database. 