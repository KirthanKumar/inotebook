#43 - iNotebook db & Express Server Setup:
https://mongoosejs.com/

when we open mongodb compass app, it shows a interface to enter URL. This is a URL to connect to colud mongodb that is mongodb atlas from our local database. This will be done when we are finished with development and into deployment. That is we will make our remote database a online cloud database in mongodb atlas. 
As i told earlier i did not choose 'run it as a service' for mongodb while downloading it, i have to run 'mongod' command in my terminal/powershell and click on connect to localhost in my mongodb app in order connect.

This connection string can be passed in mongoose and connected to local database: 
mongodb://localhost:27017/

connnecting to our databse using mongoose:
> npm i -D nodemon -> installing nodemon as a part of devDependencies

const connectToMongo = () => {
    mongoose.connect(mongoURI, () => {
     console.log("connected to mongo successfully");
 })   
}
as of recent versions of Mongoose, mongoose.connect() does not accept a callback anymore. Instead, it returns a promise.
We use .then() to handle the success case when the connection is established and .catch() to handle any errors that occur during the connection process.

> nodemon index.js

used express to create API server (see index.js)

Now if we sent a GET request to http://localhost:3000 using tunder-client we get a response (will get whatever we set in our endpoint that is app.get() in my code).

We need more endpoints to write to database, to authenticate user, to check if user is connect and fetch him/her data, to also fetch notes and display in react UI.

--------------------------------------------------------------------

#44 - Creating Routes & Schema for Storing Notes and Users:

> git reset
This command will unstage all changes that have been previously staged, leaving your working directory unchanged. 

schemas(models) -> https://mongoosejs.com/docs/guide.html

--------------------------------------------------------------------

#45 - Storing Data into the Database Using Mongoose Model:

In tunder-client we create a new GET request to http://localhost:3000/api/auth and we get the response specified by us. 
In that request we choose Headers and add key-value "Content-Type" "application/json", and go to body-> json and put this 
{
  "name":"kirthan"
}
and try to print req.body in console it prints "undefined"

If we want to use req.body then we have to use a middleware : app.use(express.json())
now if we try the same thing it prints 
{
  "name":"kirthan"
}
in console.

Therefore by adding this code app.use(express.json()) to index.js we can deal with json(like sending request with body as json). 

-------------------------------

const user = User(req.body);
user.save();

Now if we send request with json body (req.body) as 
{
  "name":"kirthan",
  "email":"kirthan@g.com",
  "password":"874tfgyb"
}
to http://localhost:3000/api/auth

this will be saved in our database inside our default collection 'test'

_id: ObjectId('66070a49de080a032d59289a')
name: "kirthan"
email: "kirthan@g.com"
password: "874tfgyb"
date: 2024-03-29T18:36:57.896+00:00
__v: 0

-------------------------------

when we not follow the defined schema (like {"name":"", "email" : "98578568"} ) our application throws error. 
So we will define a system to check if work is going right or wrong. So we will use validation. 

It should be a POST request to http://localhost:3000/api/auth not GET. If it is GET request, as the data we are sending is sensitive like password, it can be seen in logs files of the computer.